<jsp:root version="2.0" xmlns="http://www.w3.org/1999/xhtml"        xmlns:jsp="http://java.sun.com/JSP/Page"        xmlns:c="http://java.sun.com/jsp/jstl/core"        xmlns:s="http://www.springframework.org/tags"        xmlns:sf="http://www.springframework.org/tags/form">    <s:url value="/resources/images" var="images"/>    <s:url value="subject/list" var="subj_list"/>    <div class="container">        <div class="alert alert-info" role="alert">            <strong>Heads up!</strong> The following are excerpt from our SAD report.        </div>        <div class="row">            <div class="col-md-12">                <h2>Introduction</h2>                <p>                    This is the Software Architecture Document (SAD) for the enterprise learning management system,                    "Whiteboard LMS". In this SAD, we discuss the design and architecture aspect of the first feature of                    Whiteboard LMS in terms of its business domain model and application logic, the layering of the system                    and high-level model, the complete system architecture and the interactions, and finally conclude with                    the detailed discussion and rationale on the patterns of enterprise application architecture used in                    each software components, layer and sub-system.                </p>                <h2>High-level Model and Architecture</h2>                <p>                    For the high-level architecture, we follow the layering design principal. It is based upon the                    3-tiered layer architecture found in the typical enterprise system. However, as we discussed the                    functional requirement in our project report Part 1, we also consider the integration with the                    external enterprise systems (e.g. Email Gateway, Turnitin, Echo360 Lecture Capture system)                    as well as supporting different type of clients such as iOS/Android Mobile App client for                    the Whiteboard LMS. Therefore, we adopt the domain Service layer as discussed in  (Fowler, 2003)                    for organizing and separating the application logic and domain logic.                    The Figure 2 depict the high-level view of the Whiteboard LMS architecture layer.                    As shown in the Figure 2, the main difference from typical 3-tiered architecture is the abstraction                    of the middle Logic layer which comprise of Domain Model layer and the Service layer that works                    in tandem side-by-side at this middle layer. The role and responsibilities of these layers                    are explained in the Table 1.                </p>                <img src="${images}/layer.png"/>                <hr/>                <h2>Complete System Architecture</h2>                <p>                    The Figure 3 depict the high level view of the complete system component architecture. Since the                    Whiteboard LMS is a JavaEE web application, the runtime container is a JavaEE servlet container                    and all the components are deployed into this environment. In our prototype, we use the Apache                    Tomcat for the servlet container. The next important system component is the use of Spring                    framework Inversion of Control (IoC) container for using Constructor and/or Setter Dependency                    Injection design pattern. The Spring framework IoC container manages the lifecycle of objects                    from creation to their destruction. We also use the Hibernate framework for dealing with the                    heterogeneous data sources, ORM, Entity and transactional management. All the objects                    (including Hibernate objects) are composed as Spring beans and their respective bean scope, usually                    Singleton pattern created by bean Factory Method design pattern.                </p>                <img src="${images}/spring_ioc.png"/>                <hr/>                <h2>Structural Design</h2>                <p>                    We use the Object-to-Relational Mapping approach discussed in (Fowler, 2003). For the implementation                    convenience, we choose the Hibernate framework to structurally map our domain objects into the                    relational database. The Figure 5 - ER diagram shows the complete database table structural design                    of the Relational Data Model that materialized from the Whiteboard LMS Domain Model.                </p>                <img src="${images}/er-diagram.png"/>                <hr/>                <h2>Architectural Interaction</h2>                <p>                    For the data-source access layer, we choose Data Mapper pattern (Fowler, 2003) for interacting with                    the domain service layer and data-source layer. The data mapper pattern is implemented as                    Data Access Object design pattern (Core J2EE Patterns). The Figure 6 to 9 show the sequence diagrams                    on how the Whiteboard LMS CRUD operations and Create-View-Update-Delete Announcement use cases are                    implemented. It depict the architectural design for how the different layers interact with each other.                </p>                <img src="${images}/sd_view_announcement.png"/>            </div>        </div>    </div> <!-- /container --></jsp:root>